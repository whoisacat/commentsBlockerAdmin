logging:
  level:
    root: INFO
    com:
      whoisacat:
        freelance:
          ura:
            front:
              interceptors:
                RequestResponseLoggingInterceptorJava: DEBUG
server:
  port: 8080
spring:
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/comments_blocker_admin_db}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
    platform: postgresql
    hikari:
      maximum-pool-size: 10
      minimum-idle: 10
    initialization-mode: always
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQL94Dialect
    show-sql: false
    generate-ddl: false
    properties:
      hibernate:
        format_sql: true
    hibernate:
      ddl-auto: validate
management:
  endpoints:
    enabled-by-default: false
    web:
      exposure:
        include: health, logfile, metrics
      base-path: /monitoring
  endpoint:
    health:
      enabled: true
      show-components: when_authorized
      show-details: when_authorized
      roles: ADMIN
      cache:
        time-to-live: 5000
    info:
      enabled: true
    env:
      enabled: true
    heartbeat:
      enabled: true
    logfile:
      enabled: true
    metrics:
      enabled: true
  level:
    root: DEBUG
springdoc:
  swagger-ui:
    path: /swagger-ui.html
  api-docs:
    path: /api-docs
com:
  whoisacat:
    comments-blocker:
      admin-api-attributes:
        protocol: ${ADMIN_API_PROTOCOL:http}
        host: ${ADMIN_API_HOST:localhost}
        port: ${ADMIN_API_PORT:8081}
        redirect-protocol: ${REDIRECT_ADMIN_API_PROTOCOL:http}
        redirect-host: ${REDIRECT_ADMIN_API_HOST:localhost}
        redirect-port: ${REDIRECT_ADMIN_API_PORT:8081}
        front-protocol: ${FRONT_API_PROTOCOL:http}
        front-host: ${FRONT_API_HOST:localhost}
        front-port: ${FRONT_API_PORT:8080}
      service:
        fileUpdatePeriod: 5
        use: kafka
        kafkaServer: ${KAFKA_SERVER_URL:localhost:9091}
      health:
        heartbeat:
          period: 1000
